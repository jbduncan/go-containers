[hooks]
enter = "mise i -q"

[settings]
experimental = true
lockfile = true

[tasks.ast-grep]
description = "Run ast-grep rules against the library source code."
hide = true
run = "ast-grep scan"
depends = "build"
wait_for = ["test"]

[tasks.ast-grep-test]
description = "Run the tests for the ast-grep rules."
hide = true
run = "ast-grep test"
sources = ["sgconfig.yml", "sg/**"]
outputs = { auto = true }
wait_for = ["test"]

[tasks.build]
description = "Build the library source code."
run = "go build ./..."
sources = ["go.mod", "go.sum", "**/*.go"]
outputs = { auto = true }
wait_for = ["go-mod-tidy", "go-mod-verify"]
alias = "b"

[tasks.check]
description = "Run all linters and tests against the library source code."
depends = ["lint", "test"]
alias = "c"

[tasks.depaware]
description = "Check that no Go package dependencies changed unexpectedly."
hide = true
run = "go run internal/tasks/tasks.go depaware"
depends = ["build"]
sources = ["go.mod", "go.sum", "**/*.go", "**/depaware.txt"]
outputs = { auto = true }
wait_for = ["test"]

[tasks.eg]
description = "Check that the library source code is already refactored according to the eg templates."
hide = true
run = "go run internal/tasks/tasks.go eg"
depends = ["build"]
sources = ["go.mod", "go.sum", "**/*.go", "eg/*.template"]
outputs = { auto = true }
wait_for = ["test"]

[tasks.fix]
description = "Automatically fix as many lint errors as possible."
run = "go run internal/tasks/tasks.go fix"
depends = ["build"]
alias = "f"

[tasks.go-mod-tidy]
description = "Tidy up 'go.mod' and 'go.sum'."
hide = true
run = "go mod tidy"
wait_for = ["go-mod-verify"]

[tasks.go-mod-tidy-check]
description = "Check that 'go mod tidy' changed no files."
hide = true
run = "git diff --exit-code -- go.mod go.sum"
depends = "go-mod-tidy"

[tasks.go-mod-verify]
description = "Check that the dependencies of the library source code have not been modified since being downloaded."
hide = true
run = "go mod verify"

[tasks.golangci-lint]
description = "Check that no problems are found when running the linters defined in .golangci.yml against the library source code."
hide = true
run = "golangci-lint run"
depends = "build"
sources = ["go.mod", "go.sum", "**/*.go"]
outputs = { auto = true }
wait_for = ["test"]

[tasks.lint]
description = "Check the library source code for problems."
hide = true
depends = [
  "ast-grep",
  "ast-grep-test",
  "depaware",
  "eg",
  "go-mod-tidy-check",
  "go-mod-verify",
  "golangci-lint",
  "nilaway",
]

[tasks.nilaway]
description = "Check that no common sources of nil pointer dereferences can occur in the library source code."
hide = true
run = "nilaway -include-pkgs github.com/jbduncan/go-containers ./..."
depends = "build"
sources = ["go.mod", "go.sum", "**/*.go"]
outputs = { auto = true }
wait_for = ["test"]

[tasks.test]
description = "Run tests for the library source code."
run = "go test -shuffle=on -race ./..."
depends = "build"
sources = ["go.mod", "go.sum", "**/*.go"]
outputs = { auto = true }
alias = "t"

[tasks.update-versions]
description = "Update the versions of all tools and dependencies"
run = "go run internal/tasks/tasks.go update-versions"
alias = "u"

[tools]
# cosign is used by mise itself to download tools more securely
cosign = "latest"
go = "latest"
"go:github.com/tailscale/depaware" = "latest"
"go:go.uber.org/nilaway/cmd/nilaway" = "latest"
"go:golang.org/x/tools/cmd/eg" = "latest"
golangci-lint = "latest"
# slsa-verifier is used by mise itself to download tools more securely
slsa-verifier = "latest"
"ubi:ast-grep/ast-grep" = "latest"
